# ..##.........##.........##.........##.........##.........##.......  --->
# #..O#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
# .#....X..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
# ..#.#...#O#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
# .#...##..#..X...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
# ..#.##.......#.X#.......#.##.......#.##.......#.##.......#.##.....  --->
# .#.#.#....#.#.#.#.O..#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
# .#........#.#........X.#........#.#........#.#........#.#........#
# #.##...#...#.##...#...#.X#...#...#.##...#...#.##...#...#.##...#...
# #...##....##...##....##...#X....##...##....##...##....##...##....#
# .#..#...#.#.#..#...#.#.#..#...X.#.#..#...#.#.#..#...#.#.#..#...#.#  --->

def count_trees(data, row, column, size_y, size_x):
    if row >= size_y or column >= size_x:
        return 0
    if data[row][column] == 'X':
        return 1 + count_trees(data, row + 1, column + 3, size_y, size_x)
    return count_trees(data, row + 1, column + 3, size_y, size_x)


def get_num_of_trees():
    with open('forest.txt') as file:
        data = [line.rstrip() for line in file]
    return count_trees(data, 0, 0, len(data), len(data[0]))


def main():
    assert 7 == get_num_of_trees()


if __name__ == '__main__':
    main()
